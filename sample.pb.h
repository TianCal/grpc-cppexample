// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sample_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sample_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_sample_2eproto_metadata_getter(int index);
namespace sample {
class SampleRequest;
struct SampleRequestDefaultTypeInternal;
extern SampleRequestDefaultTypeInternal _SampleRequest_default_instance_;
class SampleResponse;
struct SampleResponseDefaultTypeInternal;
extern SampleResponseDefaultTypeInternal _SampleResponse_default_instance_;
}  // namespace sample
PROTOBUF_NAMESPACE_OPEN
template<> ::sample::SampleRequest* Arena::CreateMaybeMessage<::sample::SampleRequest>(Arena*);
template<> ::sample::SampleResponse* Arena::CreateMaybeMessage<::sample::SampleResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sample {

// ===================================================================

class SampleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample.SampleRequest) */ {
 public:
  inline SampleRequest() : SampleRequest(nullptr) {}
  virtual ~SampleRequest();
  explicit constexpr SampleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleRequest(const SampleRequest& from);
  SampleRequest(SampleRequest&& from) noexcept
    : SampleRequest() {
    *this = ::std::move(from);
  }

  inline SampleRequest& operator=(const SampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleRequest& operator=(SampleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleRequest* internal_default_instance() {
    return reinterpret_cast<const SampleRequest*>(
               &_SampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SampleRequest& a, SampleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleRequest* New() const final {
    return CreateMaybeMessage<SampleRequest>(nullptr);
  }

  SampleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleRequest& from);
  void MergeFrom(const SampleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample.SampleRequest";
  }
  protected:
  explicit SampleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sample_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestSampleFieldFieldNumber = 1,
  };
  // string request_sample_field = 1;
  void clear_request_sample_field();
  const std::string& request_sample_field() const;
  void set_request_sample_field(const std::string& value);
  void set_request_sample_field(std::string&& value);
  void set_request_sample_field(const char* value);
  void set_request_sample_field(const char* value, size_t size);
  std::string* mutable_request_sample_field();
  std::string* release_request_sample_field();
  void set_allocated_request_sample_field(std::string* request_sample_field);
  private:
  const std::string& _internal_request_sample_field() const;
  void _internal_set_request_sample_field(const std::string& value);
  std::string* _internal_mutable_request_sample_field();
  public:

  // @@protoc_insertion_point(class_scope:sample.SampleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_sample_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class SampleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample.SampleResponse) */ {
 public:
  inline SampleResponse() : SampleResponse(nullptr) {}
  virtual ~SampleResponse();
  explicit constexpr SampleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleResponse(const SampleResponse& from);
  SampleResponse(SampleResponse&& from) noexcept
    : SampleResponse() {
    *this = ::std::move(from);
  }

  inline SampleResponse& operator=(const SampleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleResponse& operator=(SampleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleResponse* internal_default_instance() {
    return reinterpret_cast<const SampleResponse*>(
               &_SampleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SampleResponse& a, SampleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleResponse* New() const final {
    return CreateMaybeMessage<SampleResponse>(nullptr);
  }

  SampleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleResponse& from);
  void MergeFrom(const SampleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample.SampleResponse";
  }
  protected:
  explicit SampleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sample_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseSampleFieldFieldNumber = 1,
  };
  // string response_sample_field = 1;
  void clear_response_sample_field();
  const std::string& response_sample_field() const;
  void set_response_sample_field(const std::string& value);
  void set_response_sample_field(std::string&& value);
  void set_response_sample_field(const char* value);
  void set_response_sample_field(const char* value, size_t size);
  std::string* mutable_response_sample_field();
  std::string* release_response_sample_field();
  void set_allocated_response_sample_field(std::string* response_sample_field);
  private:
  const std::string& _internal_response_sample_field() const;
  void _internal_set_response_sample_field(const std::string& value);
  std::string* _internal_mutable_response_sample_field();
  public:

  // @@protoc_insertion_point(class_scope:sample.SampleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_sample_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SampleRequest

// string request_sample_field = 1;
inline void SampleRequest::clear_request_sample_field() {
  request_sample_field_.ClearToEmpty();
}
inline const std::string& SampleRequest::request_sample_field() const {
  // @@protoc_insertion_point(field_get:sample.SampleRequest.request_sample_field)
  return _internal_request_sample_field();
}
inline void SampleRequest::set_request_sample_field(const std::string& value) {
  _internal_set_request_sample_field(value);
  // @@protoc_insertion_point(field_set:sample.SampleRequest.request_sample_field)
}
inline std::string* SampleRequest::mutable_request_sample_field() {
  // @@protoc_insertion_point(field_mutable:sample.SampleRequest.request_sample_field)
  return _internal_mutable_request_sample_field();
}
inline const std::string& SampleRequest::_internal_request_sample_field() const {
  return request_sample_field_.Get();
}
inline void SampleRequest::_internal_set_request_sample_field(const std::string& value) {
  
  request_sample_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SampleRequest::set_request_sample_field(std::string&& value) {
  
  request_sample_field_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sample.SampleRequest.request_sample_field)
}
inline void SampleRequest::set_request_sample_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_sample_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sample.SampleRequest.request_sample_field)
}
inline void SampleRequest::set_request_sample_field(const char* value,
    size_t size) {
  
  request_sample_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sample.SampleRequest.request_sample_field)
}
inline std::string* SampleRequest::_internal_mutable_request_sample_field() {
  
  return request_sample_field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SampleRequest::release_request_sample_field() {
  // @@protoc_insertion_point(field_release:sample.SampleRequest.request_sample_field)
  return request_sample_field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SampleRequest::set_allocated_request_sample_field(std::string* request_sample_field) {
  if (request_sample_field != nullptr) {
    
  } else {
    
  }
  request_sample_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_sample_field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sample.SampleRequest.request_sample_field)
}

// -------------------------------------------------------------------

// SampleResponse

// string response_sample_field = 1;
inline void SampleResponse::clear_response_sample_field() {
  response_sample_field_.ClearToEmpty();
}
inline const std::string& SampleResponse::response_sample_field() const {
  // @@protoc_insertion_point(field_get:sample.SampleResponse.response_sample_field)
  return _internal_response_sample_field();
}
inline void SampleResponse::set_response_sample_field(const std::string& value) {
  _internal_set_response_sample_field(value);
  // @@protoc_insertion_point(field_set:sample.SampleResponse.response_sample_field)
}
inline std::string* SampleResponse::mutable_response_sample_field() {
  // @@protoc_insertion_point(field_mutable:sample.SampleResponse.response_sample_field)
  return _internal_mutable_response_sample_field();
}
inline const std::string& SampleResponse::_internal_response_sample_field() const {
  return response_sample_field_.Get();
}
inline void SampleResponse::_internal_set_response_sample_field(const std::string& value) {
  
  response_sample_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SampleResponse::set_response_sample_field(std::string&& value) {
  
  response_sample_field_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sample.SampleResponse.response_sample_field)
}
inline void SampleResponse::set_response_sample_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_sample_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sample.SampleResponse.response_sample_field)
}
inline void SampleResponse::set_response_sample_field(const char* value,
    size_t size) {
  
  response_sample_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sample.SampleResponse.response_sample_field)
}
inline std::string* SampleResponse::_internal_mutable_response_sample_field() {
  
  return response_sample_field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SampleResponse::release_response_sample_field() {
  // @@protoc_insertion_point(field_release:sample.SampleResponse.response_sample_field)
  return response_sample_field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SampleResponse::set_allocated_response_sample_field(std::string* response_sample_field) {
  if (response_sample_field != nullptr) {
    
  } else {
    
  }
  response_sample_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_sample_field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sample.SampleResponse.response_sample_field)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sample_2eproto
